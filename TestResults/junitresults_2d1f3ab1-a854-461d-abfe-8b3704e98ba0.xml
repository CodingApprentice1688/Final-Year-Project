<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="10" skipped="0" tests="13" time="0.733" timestamp="2022-07-22T13:16:15.335641" hostname="LAPTOP-194AAHT5"><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_admin_login_with_default_password" file="FYP\FYP\FYP\Test\test_patient.py" line="72" time="0.023"><failure message="NameError: name 'rq' is not defined">self = &lt;test_patient.test_patient testMethod=test_admin_login_with_default_password&gt;

    def test_admin_login_with_default_password(self):
&gt;       s = rq.Session()
E       NameError: name 'rq' is not defined

FYP\FYP\FYP\Test\test_patient.py:74: NameError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_database" file="FYP\FYP\FYP\Test\test_patient.py" line="127" time="0.002"><failure message="AssertionError: False is not true">self = &lt;test_patient.test_patient testMethod=test_database&gt;

    def test_database(self):
        tester = os.path.exists("healthcare_db.sql")
&gt;       self.assertTrue(tester)
E       AssertionError: False is not true

FYP\FYP\FYP\Test\test_patient.py:130: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_dummy" file="FYP\FYP\FYP\Test\test_patient.py" line="95" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_index_login" file="FYP\FYP\FYP\Test\test_patient.py" line="79" time="0.003"><failure message="TypeError: Need a valid target to patch. You supplied: 'session'">target = 'session'

    def _get_target(target):
        try:
&gt;           target, attribute = target.rsplit('.', 1)
E           ValueError: not enough values to unpack (expected 2, got 1)

..\..\..\AppData\Local\Programs\Python\Python39\lib\unittest\mock.py:1560: ValueError

During handling of the above exception, another exception occurred:

self = &lt;test_patient.test_patient testMethod=test_index_login&gt;

    def test_index_login(self):
&gt;       with patch("session", dict()) as session:

FYP\FYP\FYP\Test\test_patient.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\AppData\Local\Programs\Python\Python39\lib\unittest\mock.py:1717: in patch
    getter, attribute = _get_target(target)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

target = 'session'

    def _get_target(target):
        try:
            target, attribute = target.rsplit('.', 1)
        except (TypeError, ValueError):
&gt;           raise TypeError("Need a valid target to patch. You supplied: %r" %
                            (target,))
E           TypeError: Need a valid target to patch. You supplied: 'session'

..\..\..\AppData\Local\Programs\Python\Python39\lib\unittest\mock.py:1562: TypeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_insert_rows_calls_cursor_method" file="FYP\FYP\FYP\Test\test_patient.py" line="142" time="0.004"><failure message="NameError: name 'insert_rows' is not defined">self = &lt;test_patient.test_patient testMethod=test_insert_rows_calls_cursor_method&gt;

    def test_insert_rows_calls_cursor_method(self):
        dbc = self.fix_dbc()
        rows = self.fix_rows()
&gt;       insert_rows(rows, 'users', dbc)
E       NameError: name 'insert_rows' is not defined

FYP\FYP\FYP\Test\test_patient.py:146: NameError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_login" file="FYP\FYP\FYP\Test\test_patient.py" line="54" time="0.008"><failure message="KeyError: 'logged_in'">self = &lt;test_patient.test_patient testMethod=test_login&gt;

    def test_login(self):
       with app.test_client() as client:
           #client.post('/Patient_Main', data=dict(username='s', password='s'))
           client.get('/Patient_Main', data=dict(username='s', password='s'))
           with client.session_transaction() as sess:
&gt;              self.assertTrue(sess['logged_in'] == True)

FYP\FYP\FYP\Test\test_patient.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;SecureCookieSession {}&gt;, key = 'logged_in'

    def __getitem__(self, key: str) -&gt; t.Any:
        self.accessed = True
&gt;       return super().__getitem__(key)
E       KeyError: 'logged_in'

..\..\..\AppData\Local\Programs\Python\Python39\lib\site-packages\flask\sessions.py:79: KeyError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_login_v1" file="FYP\FYP\FYP\Test\test_patient.py" line="61" time="0.003"><failure message="AssertionError: False is not true">self = &lt;test_patient.test_patient testMethod=test_login_v1&gt;

    def test_login_v1(self):
       with app.test_client() as client:
           client.post('/LoginController', data=dict(username='wenling', password='password'))
           with client.session_transaction() as session:
&gt;              self.assertTrue(session.get("username") == "wenling")
E              AssertionError: False is not true

FYP\FYP\FYP\Test\test_patient.py:66: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_pass_correct" file="FYP\FYP\FYP\Test\test_patient.py" line="118" time="0.003"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_pass_correct1" file="FYP\FYP\FYP\Test\test_patient.py" line="111" time="0.003"><failure message="NameError: name 'json' is not defined">self = &lt;test_patient.test_patient testMethod=test_pass_correct1&gt;

    def test_pass_correct1(self):
        tester = app.test_client(self)
        sent = {'username': 'wenling', 'password': 'password'}
        result = tester.post('/LoginController', data=sent)
        print(result.data)
&gt;       self.assertEqual(result.data, json.dumps(sent))
E       NameError: name 'json' is not defined

FYP\FYP\FYP\Test\test_patient.py:117: NameError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------
b'&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;404 Not Found&lt;/title&gt;\n&lt;h1&gt;Not Found&lt;/h1&gt;\n&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;\n'

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_pass_incorrect" file="FYP\FYP\FYP\Test\test_patient.py" line="122" time="0.003"><failure message="AssertionError: False is not true">self = &lt;test_patient.test_patient testMethod=test_pass_incorrect&gt;

    def test_pass_incorrect(self):
            tester = app.test_client(self)
            response = tester.post('/LoginController', data=dict(username = 'wenling', password='password'))
&gt;           self.assertTrue(b'wenling' in response.data)
E           AssertionError: False is not true

FYP\FYP\FYP\Test\test_patient.py:126: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_test" file="FYP\FYP\FYP\Test\test_patient.py" line="68" time="0.002"><failure message="TypeError: test_test() missing 2 required positional arguments: 'username' and 'password'">self = &lt;unittest.case._Outcome object at 0x000002328C9AF3D0&gt;
test_case = &lt;test_patient.test_patient testMethod=test_test&gt;, isTest = True

    @contextlib.contextmanager
    def testPartExecutor(self, test_case, isTest=False):
        old_success = self.success
        self.success = True
        try:
&gt;           yield

..\..\..\AppData\Local\Programs\Python\Python39\lib\unittest\case.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\AppData\Local\Programs\Python\Python39\lib\unittest\case.py:593: in run
    self._callTestMethod(testMethod)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;test_patient.test_patient testMethod=test_test&gt;
method = &lt;bound method test_patient.test_test of &lt;test_patient.test_patient testMethod=test_test&gt;&gt;

    def _callTestMethod(self, method):
&gt;       method()
E       TypeError: test_test() missing 2 required positional arguments: 'username' and 'password'

..\..\..\AppData\Local\Programs\Python\Python39\lib\unittest\case.py:550: TypeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_username_exist" file="FYP\FYP\FYP\Test\test_patient.py" line="148" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_patient.test_patient" name="test_users_login" file="FYP\FYP\FYP\Test\test_patient.py" line="98" time="0.003"><failure message="AssertionError: b'&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title[169 chars]p&gt;\n' != 'wenling'">self = &lt;test_patient.test_patient testMethod=test_users_login&gt;

    def test_users_login(self):
        result = self.app.post('/LoginController', data=dict(username='wenling', password='password'), follow_redirects=True)
        #result = self.app.post('/LoginController', data=dict(username='oswaldo', password='password'))
        # I want to check the HTML tag's text value data after logging in
        #self.assertIn(result.data.getTag("h1", b"Nicole") #What I imagined using &lt;h1&gt;
        #self.assertin(result.data.getId("userA", b"Nicole") #What I imagined using id
    
        #This returns true which is okay, because 'Nicole' exists in the whole page
        #self.assertTrue(result, b'wenling')
        #self.assertTrue(result)
&gt;       self.assertEqual(result.data, 'wenling')
E       AssertionError: b'&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title[169 chars]p&gt;\n' != 'wenling'

FYP\FYP\FYP\Test\test_patient.py:109: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase></testsuite></testsuites>