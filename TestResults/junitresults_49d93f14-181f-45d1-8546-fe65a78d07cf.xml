<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="5" skipped="0" tests="7" time="4.875" timestamp="2022-07-09T13:06:54.358347" hostname="LAPTOP-9RU984SS"><testcase classname="FYP.FYP.FYP.Test.test_Patient.test_patient" name="test_admin_login_with_default_password" file="FYP\FYP\FYP\Test\test_Patient.py" line="40" time="0.005"><failure message="NameError: name 'rq' is not defined">self = &lt;FYP.Test.test_Patient.test_patient testMethod=test_admin_login_with_default_password&gt;

    def test_admin_login_with_default_password(self):
&gt;       s = rq.Session()
E       NameError: name 'rq' is not defined

FYP\FYP\FYP\Test\test_Patient.py:42: NameError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_Patient.test_patient" name="test_dummy" file="FYP\FYP\FYP\Test\test_Patient.py" line="63" time="0.001"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_Patient.test_patient" name="test_index" file="FYP\FYP\FYP\Test\test_Patient.py" line="47" time="0.002"><failure message="ModuleNotFoundError: No module named 'LoginController'">self = &lt;FYP.Test.test_Patient.test_patient testMethod=test_index&gt;

    def test_index(self):
&gt;       with patch("LoginController.session", dict()) as session:

FYP\FYP\FYP\Test\test_Patient.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\anaconda3\lib\unittest\mock.py:1389: in __enter__
    self.target = self.getter()
..\..\..\anaconda3\lib\unittest\mock.py:1564: in &lt;lambda&gt;
    getter = lambda: _importer(target)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

target = 'LoginController'

    def _importer(target):
        components = target.split('.')
        import_path = components.pop(0)
&gt;       thing = __import__(import_path)
E       ModuleNotFoundError: No module named 'LoginController'

..\..\..\anaconda3\lib\unittest\mock.py:1236: ModuleNotFoundError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_Patient.test_patient" name="test_login" file="FYP\FYP\FYP\Test\test_Patient.py" line="30" time="0.004"><failure message="KeyError: 'logged_in'">self = &lt;FYP.Test.test_Patient.test_patient testMethod=test_login&gt;

    def test_login(self):
       with app.test_client() as client:
           client.post('/LoginController', data=dict(username='wenling', password='password'))
           with client.session_transaction() as session:
&gt;              assert session['logged_in']

FYP\FYP\FYP\Test\test_Patient.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;SecureCookieSession {}&gt;, key = 'logged_in'

    def __getitem__(self, key):
        self.accessed = True
&gt;       return super(SecureCookieSession, self).__getitem__(key)
E       KeyError: 'logged_in'

..\..\..\anaconda3\lib\site-packages\flask\sessions.py:84: KeyError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_Patient.test_patient" name="test_pass_correct" file="FYP\FYP\FYP\Test\test_Patient.py" line="81" time="0.002"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_Patient.test_patient" name="test_pass_incorrect" file="FYP\FYP\FYP\Test\test_Patient.py" line="89" time="0.003"><failure message="AssertionError: False is not true">self = &lt;FYP.Test.test_Patient.test_patient testMethod=test_pass_incorrect&gt;

    def test_pass_incorrect(self):
        tester = app.test_client(self)
        response = tester.post('/LoginController', data=dict(username = 'wenling', password='password'))
&gt;       self.assertTrue(b'wenling' in response.data)
E       AssertionError: False is not true

FYP\FYP\FYP\Test\test_Patient.py:93: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.FYP.FYP.Test.test_Patient.test_patient" name="test_users_login" file="FYP\FYP\FYP\Test\test_Patient.py" line="66" time="0.002"><failure message="AssertionError: b'&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML[193 chars]p&gt;\n' != 'wenling'">self = &lt;FYP.Test.test_Patient.test_patient testMethod=test_users_login&gt;

    def test_users_login(self):
        result = self.app.post('/LoginController', data=dict(username='wenling', password='password'), follow_redirects=True)
        #result = self.app.post('/LoginController', data=dict(username='oswaldo', password='password'))
        # I want to check the HTML tag's text value data after logging in
        #self.assertIn(result.data.getTag("h1", b"Nicole") #What I imagined using &lt;h1&gt;
        #self.assertin(result.data.getId("userA", b"Nicole") #What I imagined using id
    
        #This returns true which is okay, because 'Nicole' exists in the whole page
        #self.assertTrue(result, b'wenling')
        #self.assertTrue(result)
&gt;       self.assertEqual(result.data, 'wenling')
E       AssertionError: b'&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML[193 chars]p&gt;\n' != 'wenling'

FYP\FYP\FYP\Test\test_Patient.py:77: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase></testsuite></testsuites>