<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="5" time="2.171" timestamp="2022-07-07T17:49:36.798263" hostname="DESKTOP-UCRF95V"><testcase classname="FYP.Test.test_patient.test_patient" name="test_index" file="FYP\Test\test_patient.py" line="49" time="0.063"><failure message="TypeError: test_index() takes 0 positional arguments but 1 was given">self = &lt;unittest.case._Outcome object at 0x00000209ED1972E0&gt;
test_case = &lt;test_patient.test_patient testMethod=test_index&gt;, isTest = True

    @contextlib.contextmanager
    def testPartExecutor(self, test_case, isTest=False):
        old_success = self.success
        self.success = True
        try:
&gt;           yield

C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python39_64\lib\unittest\case.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python39_64\lib\unittest\case.py:592: in run
    self._callTestMethod(testMethod)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;test_patient.test_patient testMethod=test_index&gt;
method = &lt;bound method test_patient.test_index of &lt;test_patient.test_patient testMethod=test_index&gt;&gt;

    def _callTestMethod(self, method):
&gt;       method()
E       TypeError: test_index() takes 0 positional arguments but 1 was given

C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python39_64\lib\unittest\case.py:550: TypeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_login" file="FYP\Test\test_patient.py" line="44" time="0.032"><failure message="NameError: name 'sess' is not defined">self = &lt;test_patient.test_patient testMethod=test_login&gt;

    def test_login(self):
       with app.test_client() as client:
           client.post('/login', data=dict(username='s', password='s'))
           with client.session_transaction() as session:
&gt;              self.assertTrue(sess['logged_in'])
E              NameError: name 'sess' is not defined

FYP\Test\test_patient.py:49: NameError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_pass_correct" file="FYP\Test\test_patient.py" line="76" time="0.010"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_pass_incorrect" file="FYP\Test\test_patient.py" line="84" time="0.008"><failure message="AssertionError: False is not true">self = &lt;test_patient.test_patient testMethod=test_pass_incorrect&gt;

    def test_pass_incorrect(self):
        tester = app.test_client(self)
        response = tester.post('/Patient_Main', data=dict(username = 'wenling', password='password'))
&gt;       self.assertTrue(b'wenling' in response.data)
E       AssertionError: False is not true

FYP\Test\test_patient.py:88: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_users_login" file="FYP\Test\test_patient.py" line="65" time="0.009"><failure message="AssertionError: b'wenling' not found in b'&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;404 Not Found&lt;/title&gt;\n&lt;h1&gt;Not Found&lt;/h1&gt;\n&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;\n'">self = &lt;test_patient.test_patient testMethod=test_users_login&gt;

    def test_users_login(self):
        result = self.app.post('/LoginController', data=dict(username='wenling', password='password'), follow_redirects=True)
    
        # I want to check the HTML tag's text value data after logging in
        #self.assertIn(result.data.getTag("h1", b"Nicole") #What I imagined using &lt;h1&gt;
        #self.assertin(result.data.getId("userA", b"Nicole") #What I imagined using id
    
        #This returns true which is okay, because 'Nicole' exists in the whole page
&gt;       self.assertIn(b'wenling', result.data)
E       AssertionError: b'wenling' not found in b'&lt;!doctype html&gt;\n&lt;html lang=en&gt;\n&lt;title&gt;404 Not Found&lt;/title&gt;\n&lt;h1&gt;Not Found&lt;/h1&gt;\n&lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;\n'

FYP\Test\test_patient.py:74: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase></testsuite></testsuites>