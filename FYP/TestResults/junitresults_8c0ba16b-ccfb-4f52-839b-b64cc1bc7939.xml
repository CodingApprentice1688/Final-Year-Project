<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="5" time="6.264" timestamp="2022-07-07T16:50:15.368941" hostname="DESKTOP-UCRF95V"><testcase classname="FYP.Test.test_patient.test_patient" name="test_index" file="FYP\Test\test_patient.py" line="45" time="0.023"><failure message="TypeError: test_index() takes 0 positional arguments but 1 was given">self = &lt;unittest.case._Outcome object at 0x000001E82EF8F490&gt;
test_case = &lt;test_patient.test_patient testMethod=test_index&gt;, isTest = True

    @contextlib.contextmanager
    def testPartExecutor(self, test_case, isTest=False):
        old_success = self.success
        self.success = True
        try:
&gt;           yield

C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python39_64\lib\unittest\case.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python39_64\lib\unittest\case.py:592: in run
    self._callTestMethod(testMethod)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;test_patient.test_patient testMethod=test_index&gt;
method = &lt;bound method test_patient.test_index of &lt;test_patient.test_patient testMethod=test_index&gt;&gt;

    def _callTestMethod(self, method):
&gt;       method()
E       TypeError: test_index() takes 0 positional arguments but 1 was given

C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python39_64\lib\unittest\case.py:550: TypeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_listing_all_users" file="FYP\Test\test_patient.py" line="43" time="0.013"><failure message="NameError: name 'username' is not defined">self = &lt;test_patient.test_patient testMethod=test_listing_all_users&gt;

    def test_listing_all_users(self):
&gt;       self.assertTrue(self.login(username, password).status_code == 200)
E       NameError: name 'username' is not defined

FYP\Test\test_patient.py:45: NameError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_login" file="FYP\Test\test_patient.py" line="35" time="0.050"><failure message="KeyError: 'logged_in'">self = &lt;test_patient.test_patient testMethod=test_login&gt;

    def test_login(self):
       with app.test_client() as client:
           #client.post('/Patient_Main', data=dict(username='s', password='s'))
           client.get('/Patient_Main', data=dict(username='s', password='s'))
           with client.session_transaction() as sess:
&gt;              self.assertTrue(sess['logged_in'] == True)

FYP\Test\test_patient.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;SecureCookieSession {}&gt;, key = 'logged_in'

    def __getitem__(self, key: str) -&gt; t.Any:
        self.accessed = True
&gt;       return super().__getitem__(key)
E       KeyError: 'logged_in'

C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python39_64\lib\site-packages\flask\sessions.py:79: KeyError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_pass_correct" file="FYP\Test\test_patient.py" line="55" time="0.014"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_pass_incorrect" file="FYP\Test\test_patient.py" line="63" time="0.036"><failure message="AssertionError: False is not true">self = &lt;test_patient.test_patient testMethod=test_pass_incorrect&gt;

    def test_pass_incorrect(self):
        tester = app.test_client(self)
        response = tester.post('/Patient_Main', data=dict(username = 'wenling', password='password'))
&gt;       self.assertTrue(b'wenling, password' in response.data)
E       AssertionError: False is not true

FYP\Test\test_patient.py:67: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase></testsuite></testsuites>