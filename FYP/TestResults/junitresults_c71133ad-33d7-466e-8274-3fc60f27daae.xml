<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="3" skipped="0" tests="4" time="0.712" timestamp="2022-07-06T21:09:03.580001" hostname="DESKTOP-UCRF95V"><testcase classname="FYP.Test.test_patient.test_patient" name="test_access_session" file="FYP\Test\test_patient.py" line="32" time="0.012"><failure message="AttributeError: __enter__">client = &lt;test_patient.test_patient testMethod=test_access_session&gt;

    def test_access_session(client):
&gt;       with client:
E       AttributeError: __enter__

FYP\Test\test_patient.py:34: AttributeError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_login" file="FYP\Test\test_patient.py" line="13" time="0.011"><failure message="KeyError: 'username'">self = &lt;test_patient.test_patient testMethod=test_login&gt;

    def test_login(self):
       with app.test_client() as client:
           client.post('/LoginController', data=dict(username='s', password='s'))
           with client.session_transaction() as session:
&gt;              self.assertEqual(session['username'], username)

FYP\Test\test_patient.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;SecureCookieSession {}&gt;, key = 'username'

    def __getitem__(self, key: str) -&gt; t.Any:
        self.accessed = True
&gt;       return super().__getitem__(key)
E       KeyError: 'username'

C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python39_64\lib\site-packages\flask\sessions.py:79: KeyError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_pass_correct" file="FYP\Test\test_patient.py" line="19" time="0.007"><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase><testcase classname="FYP.Test.test_patient.test_patient" name="test_pass_incorrect" file="FYP\Test\test_patient.py" line="27" time="0.004"><failure message="AssertionError: False is not true">self = &lt;test_patient.test_patient testMethod=test_pass_incorrect&gt;

    def test_pass_incorrect(self):
        tester = app.test_client(self)
        response = tester.post('/LoginController', data=dict(username = 'wenling', password='password'))
&gt;       self.assertTrue(b'password' in response.data)
E       AssertionError: False is not true

FYP\Test\test_patient.py:31: AssertionError</failure><system-out>--------------------------------- Captured Log ---------------------------------

--------------------------------- Captured Out ---------------------------------

</system-out><system-err>--------------------------------- Captured Err ---------------------------------

</system-err></testcase></testsuite></testsuites>